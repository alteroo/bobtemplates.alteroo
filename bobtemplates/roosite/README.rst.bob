.. This README is meant for consumption by humans and pypi. Pypi can render rst files so please do not use Sphinx features.
   If you want to learn more about writing documentation, please check out: http://docs.plone.org/about/documentation_styleguide.html
   This text does not appear on pypi or github. It is a comment.

==============================================================================
{{{ package.dottedname }}}
==============================================================================

The following documentation is written for persons who will checkout and use this
package for development and deployment of the
{{{ package.namespace }}} project. If you want to generate a package like this 
for a new project then take a look at 
https://github.com/alteroo/bobtemplates.alteroo


This is the complete baseline for a feature rich and secure Plone based CMS site.
The notes below will help you to quickly customize the package to your needs.
The repository for this package is located 
at http://gitlab.com/roo-{{{ package.namespace }}}/{{{ package.namespace }}}.site

Before you Start
================

Having the following in place will absolutely simplify your experience, if
find ways to improve the experience you are encouraged to contribute to the
Piano project.

* Ensure you're working on an Ubuntu machine (virtual or real)
* The user that executes the scripts should have sudo privileges (DON'T USE THE ROOT USER)
* A shared key for that user installed at gitlab (visit: https://gitlab.com/profile/keys)

Compatibility
-------------
It is expected that you will be doing development on an Ubuntu Linux system.
This has been tested on a crouton based Ubuntu 14.04 on ChromeOS and on
Cloud9 IDE. This has not been test on MacOS X and will likely not work because
some scripts rely on the apt-get package manager. It has not been thoroughly 
tested on Debian but should work on the latest stable releases.

For deployment you should ideally have about 1GB of RAM however
we've done a few tricks to support machines with less RAM, we don't recommend
that you venture below 512MB for deployments.

Development Quickstart
======================

Follow these steps to get going with development.

Step 1 - Clone the repository and change directory to checkout directory
-------------------------------------------------------------------------------
::

    git clone git@gitlab.com:roo-{{{ package.namespace }}}/{{{ package.dottedname }}}.git 
    cd {{{ package.dottedname }}}

Step 2 - Prime the machine and install
--------------------------------------------
The following commands should be run from within the buildout directory::

    bash prime.sh
    bash install.sh

Step 3 - Then switch to development mode
-------------------------------------------------------------------------------
Do this with a symlink of buildout.cfg to the develop.cfg::

    ln -sf develop.cfg buildout.cfg
    bin/buildout

What's inside
=============

.cfg files
----------

The .cfg files manage the characteristics of the site environment.
They make it possible for us to automate complex interactions 
in a predictable and configurable manner.

The `develop.cfg` is the one used for setting up a
development environment and is enabled by default. 

The `production.cfg` is used for deploying production environments.
These files are discussed in more detail below.

Old school Plone developers may notice that there is no buildout.cfg. 
This is not an accident, the recommended approach is that you symlink to the
`develop.cfg` when doing development file during development
and to the `production.cfg` when deploying to production.

Apart from these files, we also include the following supporting files:

- base.cfg    
- haproxy.cfg
- ports.cfg
- rsync.cfg
- supervisord.cfg
- travis.cfg
- zeo.cfg

Manage packages and dependencies in setup.py
--------------------------------------------

If you need to make add-ons (some systems call these modules) and other supporting
packages available to your site, then you need to become familiar with `setup.py`.

The `setup.py`, located at  
`src/{{{ package.namespace }}}/{{{ package.name }}}/setup.py`, declares a list 
of dependencies for the project. These dependencies are resolved whenever 
a build is initiated. By default, dependencies
are pulled from the pypi repository (https://pypi.org/).

This package ships with the following dependencies:
::

        'plone.api',
        'plone.app.mosaic'
        'rapido.plone',
        'gloss.theme',
        'collective.documentviewer',
        'collective.routes',
        'collective.z3cform.norobots',
        'wildcard.media',
        'Products.GenericSetup>=1.8.2',
        'Products.PloneFormGen',
        'setuptools',
        'z3c.jbot',

These packages allow us to deliver a richer out of the box experience for
our customers.

Old school Plone developers may be used to managing dependencies and packages
in the buildout.cfg file. We consider that approach to be less straightforward 
and not helpful when working with new developers.


Production Setup
===================
To switch to production mode, symlink buildout.cfg to the production.cfg
::

    ln -sf production.cfg buildout.cfg
    bin/buildout

The production server is designed to support multiple sites on a single host
At the moment we run each site on it's own unique port. 

To configure ports use `ports.cfg`.

Other supporting files that you may never need to touch include:
zeo.cfg, supervisord.cfg and haproxy.cfg


Synchronizing Data with rsync.cfg
=================================
During development is it often useful to work on real data.

.. warning:: ALWAYS pull data from production no where else!

Before you start
----------------

1. Edit rsync.cfg to point at the correct server
2. Make sure that your dev user account have shared keys with the production server
 
To synchronize data from the production server use the following command::

    bin/buildout -c rsync.cfg


Oneliner to sync and set admin password to admin::

    bin/buildout -c rsync.cfg && sh scripts/adminForDev.sh
    
Then start your dev server as normal

    bin/instance fg

Upcoming features
=================
Planned features and fixes are documented as issues at

https://github.com/alteroo/bobtemplates.alteroo/issues
